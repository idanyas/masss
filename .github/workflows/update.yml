name: Update Proxy Lists

on:
  schedule:
    # Run every 10 minutes
    - cron: "*/10 * * * *"
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write

jobs:
  update-proxies:
    runs-on: ubuntu-latest
    timeout-minutes: 30 # Prevent hanging workflows

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"
          cache: true
          cache-dependency-path: go.sum

      - name: Download dependencies
        run: go mod download

      - name: Run proxy scraper and checker
        id: scraper
        run: |
          echo "Starting proxy scraper..."
          go run main.go
        continue-on-error: true # Don't fail workflow if no proxies found
        env:
          IDAI: ${{ secrets.IDAI }}

      - name: Publish results to results branch
        if: steps.scraper.outcome == 'success'
        run: |
          # Check if results were generated
          if [ ! -d "result" ] || [ ! -f "all.txt" ]; then
            echo "⚠️  No results to publish"
            exit 0
          fi

          echo "📦 Preparing results for publishing..."

          # Save results to temp location (preserve across branch switch)
          mkdir -p /tmp/proxy-results
          cp -r result /tmp/proxy-results/
          cp all.txt /tmp/proxy-results/

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Fetch all branches
          git fetch origin

          # Always create orphan branch (no history)
          echo "📍 Creating fresh results branch (no history)..."
          git checkout --orphan results

          # Clean the branch completely (keep only .git)
          echo "🧹 Cleaning branch..."
          git rm -rf . 2>/dev/null || true
          find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} + 2>/dev/null || true

          # Copy results back
          echo "📋 Copying results..."
          cp -r /tmp/proxy-results/result .
          cp /tmp/proxy-results/all.txt .

          # Create README for results branch
          cat > README.md << 'HEREDOC'
          # 🌐 Proxy Results

          This branch contains automatically generated and validated proxy lists.

          ## 📁 Files

          - **`all.txt`** - All unique scraped proxies (before validation)
          - **`result/http.txt`** - Validated HTTP proxies
          - **`result/socks4.txt`** - Validated SOCKS4 proxies
          - **`result/socks5.txt`** - Validated SOCKS5 proxies
          - **`result/all.json`** - All validated proxies with metadata and aliases

          ## 🔄 Update Frequency

          Automatically updated every 10 minutes via GitHub Actions.

          ## 📥 Quick Download

          ### Using curl

          ```bash
          # HTTP proxies
          curl -sL https://raw.githubusercontent.com/REPOSITORY_NAME/results/result/http.txt

          # SOCKS5 proxies
          curl -sL https://raw.githubusercontent.com/REPOSITORY_NAME/results/result/socks5.txt

          # SOCKS4 proxies
          curl -sL https://raw.githubusercontent.com/REPOSITORY_NAME/results/result/socks4.txt

          # All scraped proxies (unvalidated)
          curl -sL https://raw.githubusercontent.com/REPOSITORY_NAME/results/all.txt

          # JSON with full metadata
          curl -sL https://raw.githubusercontent.com/REPOSITORY_NAME/results/result/all.json
          ```

          ### Using wget

          ```bash
          wget https://raw.githubusercontent.com/REPOSITORY_NAME/results/result/http.txt
          ```

          ## ⚙️ Source Code

          The scraper source code and documentation are available on the [main branch](../../tree/main).

          ## 📊 JSON Format

          The `all.json` file groups proxies by public IP and protocol, with aliases for duplicates:

          ```json
          [
            {
              "protocol": "http",
              "address": "1.2.3.4:8080",
              "public_ip": "1.2.3.4",
              "success_count": 2,
              "latencies_ms": [125.5, 142.3],
              "proxy_geo": {
                "ip": "1.2.3.4",
                "city": "New York",
                "country": "US",
                "asn": {"asn": "AS12345", "name": "Example ISP"}
              },
              "public_geo": {
                "ip": "5.6.7.8",
                "city": "London",
                "country": "GB"
              },
              "aliases": [
                {
                  "address": "1.2.3.4:8081",
                  "success_count": 1,
                  "latencies_ms": [156.2]
                }
              ]
            }
          ]
          ```

          ---

          *This branch contains only the latest results. History is not preserved to keep the repository lightweight.*
          HEREDOC

          # Replace repository placeholder
          sed -i "s|REPOSITORY_NAME|${{ github.repository }}|g" README.md

          # Commit and push
          git add .

          if git diff --staged --quiet; then
            echo "ℹ️  No changes to commit"
          else
            git commit -m "🔄 Update proxy lists - $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            git push --force origin results
            echo "✅ Results published to results branch"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: debug-logs
          path: |
            all.txt
            result/
          retention-days: 1
